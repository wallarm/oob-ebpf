name: CI

on:
  pull_request:
    branches: ['main']
    types: ['opened', 'reopened', 'synchronize']
  workflow_dispatch:
    inputs:
      run_tests:
        description: 'Force tests to run'
        required: false
        type: boolean

env:
  KUBECONFIG: /home/runner/.kube/config

permissions:
  contents: read

jobs:
  changes:
    name: Changes
    permissions:
      contents: read
      pull-requests: read
    runs-on: ubuntu-latest
    outputs:
      helm: ${{ steps.filter.outputs.helm}}
    steps:
      - name: Checkout
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3.0.2

      - uses: dorny/paths-filter@4512585405083f25c027a35db413c2b3b9006d50 # v2.10.2
        id: filter
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          filters: |
            helm:
              - 'helm/Chart.yaml'
              - 'helm/**/*'

  smoke:
    name: Kind test
    runs-on: ubuntu-22.04
    needs:
      - changes
    if: needs.changes.outputs.helm == 'true' || ${{ inputs.run_tests }}
    strategy:
      matrix:
        k8s: [v1.23.13, v1.24.7, v1.25.3, v1.26.0]
    steps:
      - name: Checkout
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3.0.2

      - name: Create cluster
        run: |
          kind create cluster --kubeconfig ${KUBECONFIG} --image kindest/node:${{ matrix.k8s }}

      - name: Install chart
        env:
          WALLARM_API_TOKEN: ${{ secrets.WALLARM_API_TOKEN }}
        run: make helm-install

      - name: Run smoke tests
        env:
          KIND_LOAD: true
          KIND_CLUSTER_NAME: kind
          WALLARM_USER_UUID: ${{ secrets.WALLARM_API_USER_UUID }}
          WALLARM_USER_SECRET: ${{ secrets.WALLARM_API_USER_SECRET }}
          WALLARM_CLIENT_ID: 4
        run: |
          echo ${{ secrets.GITLAB_TOKEN_SECRET }} | docker login -u ${{ secrets.GITLAB_TOKEN_NAME }} --password-stdin dkr.wallarm.com
          make smoke-test

  azure:
    name: Azure test
    runs-on: self-hosted-1cpu
    needs:
      - changes
    if: needs.changes.outputs.helm == 'true' || ${{ inputs.run_tests }}
    strategy:
      fail-fast: false
      matrix:
        #TODO include versions 1.23.12 and 1.24.3, when agent will support kernel 5.4
        version: [1.25.4]
    steps:
      - name: Checkout
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3.0.2

      - name: Import secrets
        uses: hashicorp/vault-action@8fa61e909919a3f94952e9e07ace6b5a1114440b # v2.4.3
        id: secrets
        with:
          exportEnv: false
          url: ${{ secrets.VAULT_URL }}
          role: ${{ secrets.VAULT_ROLE }}
          method: kubernetes
          secrets: |
            kv-gitlab-ci/data/github/oob-ebpf/azure subscription_id | ARM_SUBSCRIPTION_ID; 
            kv-gitlab-ci/data/github/oob-ebpf/azure client_id | ARM_CLIENT_ID;       
            kv-gitlab-ci/data/github/oob-ebpf/azure client_secret | ARM_CLIENT_SECRET;   
            kv-gitlab-ci/data/github/oob-ebpf/azure tenant_id | ARM_TENANT_ID;
            kv-gitlab-ci/data/github/oob-ebpf api_token | WALLARM_API_TOKEN;
            kv-gitlab-ci/data/github/oob-ebpf user_uuid | WALLARM_USER_UUID;
            kv-gitlab-ci/data/github/oob-ebpf user_secret | WALLARM_USER_SECRET;
            kv-gitlab-ci/data/github/shared/smoke-tests-registry-creds token_name | REGISTRY_TOKEN_NAME;
            kv-gitlab-ci/data/github/shared/smoke-tests-registry-creds token_secret | REGISTRY_TOKEN_SECRET;

      - name: Create cluster
        id: create_cluster
        env:
          ARM_SUBSCRIPTION_ID: ${{ steps.secrets.outputs.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ steps.secrets.outputs.ARM_TENANT_ID }}
          ARM_CLIENT_ID: ${{ steps.secrets.outputs.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ steps.secrets.outputs.ARM_CLIENT_SECRET }}
        run: |
          TF_DIR="${GITHUB_WORKSPACE}/test/cloud/azure"
          TF_STATE_KEY="oob-ebpf-v${{ matrix.version }}-run-${GITHUB_RUN_NUMBER}.tfstate"
          TF_ARGS="-var kube_version=${{ matrix.version }} \
                   -var github_run_number=${GITHUB_RUN_NUMBER} \
                   -var github_run_id=${GITHUB_RUN_ID} \
                   --auto-approve"
          
          cd ${TF_DIR}
          terraform init -backend-config="key=${TF_STATE_KEY}"
          terraform apply ${TF_ARGS}
          
          mkdir $(dirname ${KUBECONFIG})
          terraform output -raw kube_config > ${KUBECONFIG}
          
          echo "tf_dir=${TF_DIR}" >> ${GITHUB_OUTPUT}
          echo "tf_args=${TF_ARGS}" >> ${GITHUB_OUTPUT}
          echo "tf_state_key=${TF_STATE_KEY}" >> ${GITHUB_OUTPUT}

      - name: Install chart
        env:
          WALLARM_API_TOKEN: ${{ steps.secrets.outputs.WALLARM_API_TOKEN }}
        run: make helm-install

      - name: Run smoke tests
        env:
          WALLARM_CLIENT_ID: 4
          WALLARM_USER_UUID: ${{ steps.secrets.outputs.WALLARM_USER_UUID }}
          WALLARM_USER_SECRET: ${{ steps.secrets.outputs.WALLARM_USER_SECRET }}
          IMAGE_PULL_SECRET_NAME: wallarm-registry-creds
        run: |
          unset KUBERNETES_SERVICE_HOST
          kubectl create secret docker-registry ${IMAGE_PULL_SECRET_NAME} \
          --docker-server=dkr.wallarm.com \
          --docker-username=${{ steps.secrets.outputs.REGISTRY_TOKEN_NAME }} \
          --docker-password=${{ steps.secrets.outputs.REGISTRY_TOKEN_SECRET }} \
          --docker-email=docker-pull@unexists.unexists
          
          make smoke-test

      - name: Delete cluster
        if: (success() && steps.create_cluster.outcome == 'success') || (failure() && steps.create_cluster.outcome == 'success')
        env:
          ARM_SUBSCRIPTION_ID: ${{ steps.secrets.outputs.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ steps.secrets.outputs.ARM_TENANT_ID }}
          ARM_CLIENT_ID: ${{ steps.secrets.outputs.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ steps.secrets.outputs.ARM_CLIENT_SECRET }}
        run: |
          cd ${{ steps.create_cluster.outputs.tf_dir }}
          terraform destroy ${{ steps.create_cluster.outputs.tf_args }}
          
          az login --service-principal -u ${ARM_CLIENT_ID} -p ${ARM_CLIENT_SECRET} --tenant ${ARM_TENANT_ID}
          az account set --subscription ${ARM_SUBSCRIPTION_ID}
          STORAGE_ACCOUNT="tfstate20977"
          CONNECTION_STRING=$(az storage account show-connection-string -n ${STORAGE_ACCOUNT} | jq -r '.connectionString')
          az storage blob delete \
            --account-name ${STORAGE_ACCOUNT} \
            --container-name tfstate \
            --name ${{ steps.create_cluster.outputs.tf_state_key }} \
            --connection-string ${CONNECTION_STRING} \
            --verbose

  helm-install:
    name: Helm install
    runs-on: ubuntu-22.04
    needs:
      - changes
    if: needs.changes.outputs.helm == 'true' || ${{ inputs.run_tests }}
    steps:
      - name: Checkout
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3.0.2

      - name: Create cluster
        run: kind create cluster --kubeconfig ${KUBECONFIG} --image kindest/node:v1.24.7

      - name: Run chart tests
        env:
          WALLARM_API_TOKEN: ${{ secrets.WALLARM_API_TOKEN }}
        run: make helm-test
